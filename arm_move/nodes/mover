
#!/usr/bin/env python

"""
Mover node spawns a Collision Object representing a Table in Rviz. The node uses the Moveit Python Interface
to make a robot follow a set of waypoints.

The node implements the following services:

Reset : Moves a realsensebox at user specified distance and moves the robot
to its home configuration. Reset takes input from the user to determine if waypoints 
should be cleared or not.

Step : This service moves the robot to a user specified position and also changes the state 
of the gripper i.e. open or closed. The service returns a error code stating if the waypoint can
be reached or not. All possible waypoints are stored in a parameter server

Follow : This service makes the robot follow the waypoints which are stored using the step service.





"""



from __future__ import print_function
from six.moves import input

import sys
import copy
import rospy
import moveit_commander
import moveit_msgs.msg
import geometry_msgs.msg
from arm_move.srv import Step, Reset, Follow
from std_srvs.srv import Empty, EmptyResponse










from std_msgs.msg import String
from moveit_commander.conversions import pose_to_list


class Move:
    
    def __init__(self):
        
        self.robot = moveit_commander.RobotCommander()

        self.scene = moveit_commander.PlanningSceneInterface()
        


        self.move_group = moveit_commander.MoveGroupCommander("interbotix_arm")

        self.move_group_2 = moveit_commander.MoveGroupCommander("interbotix_gripper")




        moveit_commander.roscpp_initialize(sys.argv)
        rospy.init_node("mover", anonymous=True)
        self.waypoints = rospy.get_param("/waypoints")
        self.reset = rospy.Service('reset', Reset, self.reset_fn)
        self.step = rospy.Service('step', Step, self.step_fn)
        self.follow = rospy.Service('follow', Follow, self.follow_fn)
        



        
        


        self.box_name = ""
        self.box_name2 = ""
        
       

    def wait_for_state_update(self, box_is_known=False, box_is_attached=False, timeout=4):
        
        box_name = self.box_name
        scene = self.scene

        
        start = rospy.get_time()
        seconds = rospy.get_time()
        while (seconds - start < timeout) and not rospy.is_shutdown():
            
            attached_objects = scene.get_attached_objects([box_name])
            is_attached = len(attached_objects.keys()) > 0

            
            is_known = box_name in scene.get_known_object_names()

            if (box_is_attached == is_attached) and (box_is_known == is_known):
                return True

            rospy.sleep(0.1)
            seconds = rospy.get_time()

        return False

    def add_box(self, timeout=4):
        """
        Function takes pose of the object of type geometry_msgs/PoseStamped to add a table to the scene

        """
        rospy.sleep(3)
        
        box_name = self.box_name
        scene = self.scene

        
        self.box_pose = geometry_msgs.msg.PoseStamped()
        self.box_pose.header.frame_id = "world"
        self.box_pose.pose.orientation.w = 1.0
        self.box_pose.pose.position.x = 0
        self.box_pose.pose.position.y = 0
        self.box_pose.pose.position.z = 0 
        box_name = "table"
        
        self.box_name = box_name
        while not self.wait_for_state_update(box_is_known=True):
            scene.add_box(box_name,self.box_pose, size=(1.2, 1.2, 0))

    



    def wait_for_state_update2(self, box_is_known=False, box_is_attached=False, timeout=4):
        
        box_name2 = self.box_name2
        scene = self.scene

        
        start = rospy.get_time()
        seconds = rospy.get_time()
        while (seconds - start < timeout) and not rospy.is_shutdown():
            
            attached_objects = scene.get_attached_objects([box_name2])
            is_attached = len(attached_objects.keys()) > 0

            
            is_known = box_name2 in scene.get_known_object_names()

            if (box_is_attached == is_attached) and (box_is_known == is_known):
                return True

            rospy.sleep(0.1)
            seconds = rospy.get_time()

        return False

    
    def add_box2(self, x, y, z, timeout=4):
        rospy.sleep(3)
        
        box_name2 = self.box_name2
        scene = self.scene

        
        self.box_pose2 = geometry_msgs.msg.PoseStamped()
        self.box_pose2.header.frame_id = "world"
        self.box_pose2.pose.orientation.w = 1.0
        self.box_pose2.pose.position.x = x
        self.box_pose2.pose.position.y = y
        self.box_pose2.pose.position.z = z
        box_name2 = "realsense_box"
        
        self.box_name2 = box_name2
        while not self.wait_for_state_update2(box_is_known=True):
            scene.add_box(box_name2,self.box_pose2, size=(0.14, 0.09, 0.05))


    
            





    def reset_fn(self, req):
        """
        sets the position of the robot to home configuration, moves realsense box to user specified position,
        clears the list of waypoints depending on user input.
        
        Args:
        req : boolean (True : clear the waypoints, False: not clear the waypoints)

        
        """
        rospy.loginfo("reset is working")
        set_empty_list = req.reset_waypoints
        self.move_group.set_named_target("Home")
        self.move_group.go()
        self.add_box2(req.x, req.y, req.z)
    
        if set_empty_list == True:
            self.waypoints = []
            rospy.set_param("/waypoints", self.waypoints)
        


    def step_fn(self, req):
        """
        Check if the user specified position can be reached by arm using the MoveItErrorCode,
        moves the robot to the user specified position and add the corresponding pose of the robot 
        to the list of waypoints in the parameters server. The step service also opens or closes the gripper
        depending on user input

        Args:
        req : user specified position and state of the gripper (True or False)

        Returns:
        error_code : 1 - indicates waypoints can be reached
        error_code : -1 - indicates waypoints cannot be reached
        """

        rospy.loginfo("step is working")
        pose_goal = geometry_msgs.msg.Pose()

        
        pose_goal.position.x = req.x
        pose_goal.position.y = req.y
        pose_goal.position.z = req.z
        pose_goal.orientation.x = req.x1
        pose_goal.orientation.y = req.y1
        pose_goal.orientation.z = req.z1
        pose_goal.orientation.w = req.w
        set_gripper = req.a
        waypoints_list = [
            pose_goal.position.x, 
            pose_goal.position.y,
            pose_goal.position.z,
            pose_goal.orientation.x,
            pose_goal.orientation.y,
            pose_goal.orientation.z,
            pose_goal.orientation.w,
            set_gripper
        ]
        self.move_group.set_pose_target(pose_goal, self.move_group.get_end_effector_link())
        (a, b, c, error_code) = self.move_group.plan()

        if error_code.val == 1:
            
            self.move_group.go(pose_goal)
            self.waypoints.append(waypoints_list)
            if set_gripper == False:
                self.move_group_2.set_named_target("Open")
                self.move_group_2.go()
            else:
                self.move_group_2.set_named_target("Closed")
                self.move_group_2.go()
            rospy.set_param('/waypoints', self.waypoints)
        else:
            self.move_group.stop()

        return error_code.val
        
    
    def follow_fn(self, req):
        """
        function follows a list of waypoints generated by the step service

        Args:
        req : Input to determine whether the robot will follow waypoints once or repeat the cycle

        """
        set_follow = req.repeat
        
        if set_follow == True:
            while True:
                for i in self.waypoints:
                    rospy.logerr(i)
                    pose_goal = geometry_msgs.msg.Pose()
                    pose_goal.position.x = i[0]
                    pose_goal.position.y = i[1]
                    pose_goal.position.z = i[2]
                    pose_goal.orientation.x = i[3]
                    pose_goal.orientation.y = i[4]
                    pose_goal.orientation.z = i[5]
                    pose_goal.orientation.w = i[6]
                    set_gripper = i[7]
                    self.move_group.go(pose_goal)
                    if set_gripper == False:
                        self.move_group_2.set_named_target("Open")
                        self.move_group_2.go()
                    else:
                        self.move_group_2.set_named_target("Closed")
                        self.move_group_2.go()
        else:
            for i in self.waypoints:
                rospy.logerr(i)
                pose_goal = geometry_msgs.msg.Pose()
                pose_goal.position.x = i[0]
                pose_goal.position.y = i[1]
                pose_goal.position.z = i[2]
                pose_goal.orientation.x = i[3]
                pose_goal.orientation.y = i[4]
                pose_goal.orientation.z = i[5]
                pose_goal.orientation.w = i[6]
                set_gripper = i[7]
                self.move_group.go(pose_goal)
                if set_gripper == False:
                    self.move_group_2.set_named_target("Open")
                    self.move_group_2.go()
                else:
                    self.move_group_2.set_named_target("Closed")
                    self.move_group_2.go()
        
        
    


    
    
    
    
def main():
    n = Move()
    n.add_box()
    #n.add_box2(0.2, 0.2, 0.025)
    rospy.spin()
    


            




if __name__ == "__main__":
    try:
       
        main()
    except rospy.ROSInterruptException:
        pass
